{"version":3,"sources":["components/Header.js","components/DefaultButton.js","components/CityCard.js","components/CityCardList.js","components/Error.js","components/Input.js","App.js","reportWebVitals.js","index.js"],"names":["Header","title","DefaultButton","onClick","type","CityCard","city","country","weather","description","maxTemp","minTemp","lon","lat","className","CityCardList","cityWeather","map","weatherData","name","sys","main","temp_max","temp_min","coord","id","Error","errorMessage","Input","useState","setCity","setWeatherData","show","hasError","setError","showCard","setShowCityCard","isLoading","setLoading","handleError","setTimeout","getWeather","a","fetch","process","response","ok","json","data","onSubmit","e","preventDefault","value","placeholder","onChange","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9dc5b1f5.chunk.js","sourcesContent":["import \"./Header.css\";\r\n\r\nconst Header = ({ title }) => {\r\n  return (\r\n    <header>\r\n      <h1>{title}</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import \"./DefaultButton.css\";\r\n\r\nconst DefaultButton = ({ onClick }) => {\r\n  return (\r\n    <div>\r\n      <button type=\"submit\" onClick={onClick}>\r\n        Get weather\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DefaultButton;\r\n","import \"./CityCard.css\";\r\n\r\nconst CityCard = ({\r\n  city,\r\n  country,\r\n  weather,\r\n  description,\r\n  maxTemp,\r\n  minTemp,\r\n  lon,\r\n  lat,\r\n}) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <h2 className=\"center-text\">\r\n        {city}, <span>{country}</span>\r\n      </h2>\r\n      <h3 className=\"center-text\">{weather}</h3>\r\n      <h4 className=\"center-text\">{description}</h4>\r\n      <p>\r\n        Max temp: <span>{maxTemp}°C</span>\r\n      </p>\r\n      <p>\r\n        Min temp: <span>{minTemp}°C</span>\r\n      </p>\r\n      <p>\r\n        Location: {lon}, {lat}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CityCard;\r\n","import CityCard from \"./CityCard\";\r\nimport \"./CityCardList.css\";\r\n\r\nconst CityCardList = ({ cityWeather }) => {\r\n  return (\r\n    <div className=\"flex-container\">\r\n      {cityWeather.map(weatherData => {\r\n        return (\r\n          <CityCard\r\n            key={weatherData.id}\r\n            city={weatherData.name}\r\n            country={weatherData.sys.country}\r\n            weather={weatherData.weather[0].main}\r\n            description={weatherData.weather[0].description}\r\n            maxTemp={weatherData.main.temp_max}\r\n            minTemp={weatherData.main.temp_min}\r\n            lon={weatherData.coord.lon}\r\n            lat={weatherData.coord.lat}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CityCardList;\r\n","import \"./Error.css\";\r\n\r\nconst Error = ({ errorMessage }) => {\r\n  return (\r\n    <div className=\"error-container\">\r\n      <p>{errorMessage}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Error;","import { useState } from \"react\";\r\nimport DefaultButton from \"./DefaultButton\";\r\nimport CityCardList from \"./CityCardList\";\r\nimport Error from \"./Error\";\r\nimport \"./Input.css\";\r\n\r\nconst Input = () => {\r\n  //value of searched city\r\n  const [city, setCity] = useState(\"\");\r\n  //weather data\r\n  const [weatherData, setWeatherData] = useState([]);\r\n  //check for errors\r\n  const [hasError, setError] = useState({ show: false });\r\n  //check if city card should be displayed(without this, card reapears after error)\r\n  const [showCard, setShowCityCard] = useState(true);\r\n  //check for loading\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  //if there is an error, display error message for 3sec\r\n  const handleError = ({ errorMessage }) => {\r\n    setError({ show: true, errorMessage });\r\n    setTimeout(() => {\r\n      setError({ show: false });\r\n      setShowCityCard(false);\r\n    }, 3000);\r\n  };\r\n\r\n  const getWeather = async () => {\r\n    try {\r\n      if (city) {\r\n        setLoading(true);\r\n        setShowCityCard(true);\r\n        const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${process.env.REACT_APP_OPENWEATHERMAP_API_KEY}\r\n`);\r\n        if (response.ok) {\r\n          //week2 asks for one city card\r\n          //for week3 to show all searches: setWeatherData([data, ...weatherData])\r\n          const data = await response.json();\r\n          setWeatherData([data]);\r\n        } else {\r\n          handleError({\r\n            errorMessage: \"City not found! Please try another city.\",\r\n          });\r\n        }\r\n      } else {\r\n        handleError({ errorMessage: \"City name can`t be empty.\" });\r\n      }\r\n    } catch (err) {\r\n      handleError({\r\n        errorMessage: \"Ooops, something went wrong! Please try again\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const InputValue = e => setCity(e.target.value);\r\n\r\n  const formSubmit = e => {\r\n    e.preventDefault();\r\n    //clear input\r\n    setCity(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex-container\">\r\n      <form onSubmit={formSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"city\"\r\n          value={city}\r\n          placeholder=\"Enter a city name...\"\r\n          onChange={InputValue}\r\n        />\r\n        <DefaultButton onClick={() => getWeather()} />\r\n      </form>\r\n\r\n      {isLoading && <p>Loading...</p>}\r\n\r\n      {hasError.show && <Error errorMessage={hasError.errorMessage} />}\r\n\r\n      {!isLoading && !hasError.show && showCard && (\r\n        <CityCardList cityWeather={weatherData} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import \"./App.css\";\r\nimport Header from \"./components/Header\";\r\nimport Input from \"./components/Input\";\r\n\r\nconst App = () => {\r\n  \r\n  return (\r\n    <>\r\n      <Header title=\"Hack Your Weather\" />\r\n      <Input />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}